# decorators.py
# Этот файл содержит пользовательские декораторы для ограничения доступа к видам (views) в Django.
# Декораторы проверяют роли пользователей (гурман или владелец) и ограничивают доступ к определённым страницам.

# Импортируем HttpResponseForbidden для возврата запрета доступа, если условия не выполнены.
from django.http import HttpResponseForbidden

# Определяем декоратор gourmand_required, который ограничивает доступ только для пользователей с ролью "гурман".
def gourmand_required(view_func):
    """
    Декоратор, который проверяет, является ли аутентифицированный пользователь гурманом.
    Если пользователь не аутентифицирован или не является гурманом, доступ запрещён.

    Args:
        view_func: Функция вида (view), которую нужно защитить.

    Returns:
        wrapper: Функция-обёртка, которая выполняет проверку и вызывает view_func, если условия выполнены.

    Example:
        @gourmand_required
        def my_view(request):
            return HttpResponse("Только для гурманов!")
    """
    def wrapper(request, *args, **kwargs):
        # Проверяем, что пользователь аутентифицирован и имеет роль гурмана.
        if request.user.is_authenticated and request.user.is_gourmand():
            # Если условия выполнены, вызываем исходную функцию вида с переданными аргументами.
            return view_func(request, *args, **kwargs)
        # Если пользователь не аутентифицирован или не гурман, возвращаем запрет доступа.
        return HttpResponseForbidden("Доступ только для гурманов")
    return wrapper

# Определяем декоратор owner_required, который ограничивает доступ только для пользователей с ролью "владелец".
def owner_required(view_func):
    """
    Декоратор, который проверяет, является ли аутентифицированный пользователь владельцем заведения.
    Если пользователь не аутентифицирован или не является владельцем, доступ запрещён.

    Args:
        view_func: Функция вида (view), которую нужно защитить.

    Returns:
        wrapper: Функция-обёртка, которая выполняет проверку и вызывает view_func, если условия выполнены.

    Example:
        @owner_required
        def my_view(request):
            return HttpResponse("Только для владельцев!")
    """
    def wrapper(request, *args, **kwargs):
        # Проверяем, что пользователь аутентифицирован и имеет роль владельца.
        if request.user.is_authenticated and request.user.is_owner():
            # Если условия выполнены, вызываем исходную функцию вида с переданными аргументами.
            return view_func(request, *args, **kwargs)
        # Если пользователь не аутентифицирован или не владелец, возвращаем запрет доступа.
        return HttpResponseForbidden("Доступ только для владельцев заведений")
    return wrapper